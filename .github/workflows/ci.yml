# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 代码检查和测试
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ matrix.workspace }}
      run: npm ci

    - name: Generate Prisma Client (Backend only)
      if: matrix.workspace == 'backend'
      working-directory: backend
      run: npx prisma generate

    - name: Lint code
      working-directory: ${{ matrix.workspace }}
      run: npm run lint

    - name: Type check
      working-directory: ${{ matrix.workspace }}
      run: |
        if [ "${{ matrix.workspace }}" == "frontend" ]; then
          npm run type-check
        else
          npx tsc --noEmit
        fi

    - name: Run tests
      working-directory: ${{ matrix.workspace }}
      run: npm test
      env:
        NODE_ENV: test

  # 构建镜像
  build-images:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: false
        tags: ai-knowledge-base-${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到 Railway (可选)
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Railway
      uses: railwayapp/railway-deploy@v2
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: backend
        
  # 部署到 Vercel (可选)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: frontend